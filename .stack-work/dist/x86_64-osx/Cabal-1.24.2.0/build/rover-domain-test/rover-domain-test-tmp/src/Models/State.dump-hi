
==================== FINAL INTERFACE ====================
2017-03-08 23:05:08.941403 UTC

interface main@main:Models.State 8001
  interface hash: b16f800fe10898c233a23eca40a780c1
  ABI hash: ca898880dca577ddab98afc96e73d32d
  export-list hash: 0b0b62ee65b88820697ceada401bba4a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 2d6c658b37d8f82bf6e00b49e1e25654
  sig of: Nothing
  used TH splices: False
  where
exports:
  Models.State.getQuad
  Models.State.getRandomState
  Models.State.moveState
  Models.State.stateDistance
  Models.Location.Location{Models.Location.Location _x _y}
  Models.State.Cmd{Models.State.Move Models.State.Stay Models.State.Turn}
  Models.State.State{Models.State.State _loc _ori}
module dependencies: Models.Location Models.Orientation
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      time-1.6.0.1@time-1.6.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Float 469226b1bc53433e95d0167dec5d0312
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO.Unsafe e698988c221572efd6def186307a53e1
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  Models.Location e429380de20abd7aeab63d05abffa9ae
  exports: 22f841e516640ed9894dc94401ac2192
  Location a465f175b29794a8b975bc784ea364e9
  Location 81bbee21f6e2d509b74dca7975379295
  _x 3b0f9b13fbb37544a8cefaa951a9a325
  _y eb39f67b258b8cc741f472fdbeb63f5b
  addLoc f42027cdfe6e3854d19528becf53a3b3
  diffLoc 9fabfc00b44593676e7c0467e0900b17
  distance 2d967692ae8979b8e6afea2d2dc37e1c
import  -/  Models.Orientation 6f37e1a6665a1f982f7c69bfa1ea771a
  exports: 2940ad09ab88c79328c2f0be1267bf97
  Orientation 6012207965ec9f599958e7a22cadeaeb
  rotate b8c4cfb3396870157dbf6b1bb2ad09d8
import  -/  random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe:System.Random 33fad628288f84aac16d40e5a027af06
39b83c9961c82be4b7e0e45264d5267c
  $fEqCmd :: GHC.Classes.Eq Models.State.Cmd
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Models.State.Cmd
                  Models.State.$fEqCmd_$c==
                  Models.State.$fEqCmd_$c/= -}
39b83c9961c82be4b7e0e45264d5267c
  $fEqCmd_$c/= ::
    Models.State.Cmd -> Models.State.Cmd -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Models.State.Cmd) (b :: Models.State.Cmd) ->
                 case Models.State.$fEqCmd_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
39b83c9961c82be4b7e0e45264d5267c
  $fEqCmd_$c== ::
    Models.State.Cmd -> Models.State.Cmd -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Models.State.Cmd) (ds1 :: Models.State.Cmd) ->
                 case ds of wild {
                   Models.State.Move a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Models.State.Move b1 b2
                        -> case a1 of wild2 { GHC.Types.D# x ->
                           case b1 of wild3 { GHC.Types.D# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.eqDouble a2 b2 } } } }
                   Models.State.Turn a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Models.State.Turn b1 -> GHC.Classes.eqDouble a1 b1 }
                   Models.State.Stay
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Models.State.Stay -> GHC.Types.True } }) -}
03e92fc1250bf60fdd9a80654439b472
  $fEqState :: GHC.Classes.Eq Models.State.State
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Models.State.State
                  Models.State.$fEqState_$c==
                  Models.State.$fEqState_$c/= -}
03e92fc1250bf60fdd9a80654439b472
  $fEqState_$c/= ::
    Models.State.State -> Models.State.State -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),1*U(U))><S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Models.State.State) (w1 :: Models.State.State) ->
                 case w of ww { Models.State.State ww1 ww2 ->
                 case ww1 of ww3 { Models.Location.Location ww4 ww5 ->
                 case ww4 of ww6 { GHC.Types.D# ww7 ->
                 case w1 of ww8 { Models.State.State ww9 ww10 ->
                 case ww9 of ww11 { Models.Location.Location ww12 ww13 ->
                 case ww12 of ww14 { GHC.Types.D# ww15 ->
                 Models.State.$w$c/= ww7 ww5 ww2 ww15 ww13 ww10 } } } } } }) -}
03e92fc1250bf60fdd9a80654439b472
  $fEqState_$c== ::
    Models.State.State -> Models.State.State -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),1*U(U))><S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Models.State.State) (w1 :: Models.State.State) ->
                 case w of ww { Models.State.State ww1 ww2 ->
                 case ww1 of ww3 { Models.Location.Location ww4 ww5 ->
                 case ww4 of ww6 { GHC.Types.D# ww7 ->
                 case w1 of ww8 { Models.State.State ww9 ww10 ->
                 case ww9 of ww11 { Models.Location.Location ww12 ww13 ->
                 case ww12 of ww14 { GHC.Types.D# ww15 ->
                 Models.State.$w$c== ww7 ww5 ww2 ww15 ww13 ww10 } } } } } }) -}
39b83c9961c82be4b7e0e45264d5267c
  $fShowCmd :: GHC.Show.Show Models.State.Cmd
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Models.State.Cmd
                  Models.State.$fShowCmd_$cshowsPrec
                  Models.State.$fShowCmd_$cshow
                  Models.State.$fShowCmd_$cshowList -}
39b83c9961c82be4b7e0e45264d5267c
  $fShowCmd1 :: Models.State.Cmd -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Models.State.$fShowCmd_$cshowsPrec
                   Models.State.$fShowCmd2) -}
c5ce5cbc795587675ded79a8e77dd1c0
  $fShowCmd2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8d4a104fa84f53cba431828c158d85cf
  $fShowCmd3 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Models.State.$fShowCmd4) -}
e20bdd111c95a0067162f07f3d10e280
  $fShowCmd4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Stay"#) -}
adddaabe2a5b3cc4f6d4e0ae7b413113
  $fShowCmd5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Turn "#) -}
44c287d81b4670118a3f896ca7c74995
  $fShowCmd6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Move "#) -}
593431c63a3e79c3853a3e0a6e19a28d
  $fShowCmd7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
8699cd6c7ab462cbedafdb67ff0c0b7a
  $fShowCmd8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Models.State.$fShowCmd4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
39b83c9961c82be4b7e0e45264d5267c
  $fShowCmd_$cshow :: Models.State.Cmd -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Models.State.Cmd) ->
                 case x of wild {
                   Models.State.Move b1 b2
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Models.State.$fShowCmd6
                        (case b1 of ww { GHC.Types.D# ww1 ->
                         GHC.Float.$w$sshowSignedFloat
                           GHC.Float.$fShowDouble_$sshowFloat
                           Models.State.$fShowCmd7
                           ww1
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (case b2 of ww2 { GHC.Types.D# ww3 ->
                               GHC.Float.$w$sshowSignedFloat
                                 GHC.Float.$fShowDouble_$sshowFloat
                                 Models.State.$fShowCmd7
                                 ww3
                                 (GHC.Types.[] @ GHC.Types.Char) })) })
                   Models.State.Turn b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Models.State.$fShowCmd5
                        (case b1 of ww { GHC.Types.D# ww1 ->
                         GHC.Float.$w$sshowSignedFloat
                           GHC.Float.$fShowDouble_$sshowFloat
                           Models.State.$fShowCmd7
                           ww1
                           (GHC.Types.[] @ GHC.Types.Char) })
                   Models.State.Stay -> Models.State.$fShowCmd8 }) -}
39b83c9961c82be4b7e0e45264d5267c
  $fShowCmd_$cshowList :: [Models.State.Cmd] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Models.State.Cmd
                   Models.State.$fShowCmd1) -}
39b83c9961c82be4b7e0e45264d5267c
  $fShowCmd_$cshowsPrec ::
    GHC.Types.Int -> Models.State.Cmd -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (a :: GHC.Types.Int) (ds :: Models.State.Cmd) ->
                 case ds of wild {
                   Models.State.Move b1 b2
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww { GHC.Types.D# ww1 ->
                          GHC.Float.$w$sshowSignedFloat
                            GHC.Float.$fShowDouble_$sshowFloat
                            Models.State.$fShowCmd7
                            ww1 }
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b2 of ww { GHC.Types.D# ww1 ->
                          GHC.Float.$w$sshowSignedFloat
                            GHC.Float.$fShowDouble_$sshowFloat
                            Models.State.$fShowCmd7
                            ww1 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Models.State.$fShowCmd6
                             (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x1)))
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Models.State.$fShowCmd6
                                (f (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x1))))) } }
                   Models.State.Turn b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww { GHC.Types.D# ww1 ->
                          GHC.Float.$w$sshowSignedFloat
                            GHC.Float.$fShowDouble_$sshowFloat
                            Models.State.$fShowCmd7
                            ww1 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Models.State.$fShowCmd5 (g x1)
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Models.State.$fShowCmd5
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x1))) } }
                   Models.State.Stay -> Models.State.$fShowCmd3 }) -}
03e92fc1250bf60fdd9a80654439b472
  $fShowState :: GHC.Show.Show Models.State.State
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Models.State.State
                  Models.State.$fShowState_$cshowsPrec
                  Models.State.$fShowState_$cshow
                  Models.State.$fShowState_$cshowList -}
03e92fc1250bf60fdd9a80654439b472
  $fShowState1 :: Models.State.State -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Models.State.State) ->
                 case w of ww { Models.State.State ww1 ww2 ->
                 Models.State.$w$cshowsPrec 0# ww1 ww2 }) -}
a706849c1cdd1795254a92e9429b38ab
  $fShowState2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
f694a2eb55b9c929528a6b490246815a
  $fShowState3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_ori = "#) -}
6eb7e0519855b11ace95cc0a23db922c
  $fShowState4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
ba8e144772d79a44a6fc339b8671a429
  $fShowState5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_loc = "#) -}
a077e05c04c4d3e239cac45266edac2d
  $fShowState6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "State {"#) -}
03e92fc1250bf60fdd9a80654439b472
  $fShowState_$cshow :: Models.State.State -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Models.State.State) ->
                 Models.State.$fShowState_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
03e92fc1250bf60fdd9a80654439b472
  $fShowState_$cshowList :: [Models.State.State] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Models.State.State
                   Models.State.$fShowState1) -}
03e92fc1250bf60fdd9a80654439b472
  $fShowState_$cshowsPrec ::
    GHC.Types.Int -> Models.State.State -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U(U),1*U(U)),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Models.State.State) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Models.State.State ww3 ww4 ->
                 Models.State.$w$cshowsPrec ww1 ww3 ww4 } }) -}
ad93c9647b583bb98667da7ec540dbd7
  $tc'Move :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15786540482915484226##
                   6424285007574180907##
                   Models.State.$trModule
                   Models.State.$tc'Move1) -}
35ab6559896753778a3b919788f64ef7
  $tc'Move1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Move"#) -}
35b78381d42c41fc90a698296b2972a6
  $tc'State :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4351203367992608056##
                   6728216540603166990##
                   Models.State.$trModule
                   Models.State.$tc'State1) -}
14940b2a42b533161f463d13e3ed6d9f
  $tc'State1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'State"#) -}
02c0dd97633ee59b4a131379b7362066
  $tc'Stay :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3506993818775057404##
                   17800777854030227964##
                   Models.State.$trModule
                   Models.State.$tc'Stay1) -}
a4a152907530b342b1e3b50ee2508538
  $tc'Stay1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Stay"#) -}
77fec7078ca7dde764d4603598937863
  $tc'Turn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1802347157264924402##
                   2653187665609220564##
                   Models.State.$trModule
                   Models.State.$tc'Turn1) -}
7ea6b4eae9c55ad99b80d7e7ebb3e475
  $tc'Turn1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Turn"#) -}
48f70f46ecb453401284b07193681cb6
  $tcCmd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14787867432626567892##
                   13553755598069455856##
                   Models.State.$trModule
                   Models.State.$tcCmd1) -}
cf5ceec3446e5dbef921414be20c7be9
  $tcCmd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Cmd"#) -}
81cb38ed92afc84f6a47b4c1d189d8d8
  $tcState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12589532855019838482##
                   11575230398111287348##
                   Models.State.$trModule
                   Models.State.$tcState1) -}
45690747162e523420a1b09edbfbd6c9
  $tcState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "State"#) -}
448b8d15d8e41bff33d95367abff1958
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Models.State.$trModule2
                   Models.State.$trModule1) -}
38ea69846999fcb6501d55d58ee8ae56
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Models.State"#) -}
ff1157d6b95d260e738af1f0fe29ded3
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
1852d7fa9271f4f9dcd07468cfa72147
  $w$c/= ::
    GHC.Prim.Double#
    -> GHC.Types.Double
    -> Models.Orientation.Orientation
    -> GHC.Prim.Double#
    -> GHC.Types.Double
    -> Models.Orientation.Orientation
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: Models.Orientation.Orientation)
                   (ww3 :: GHC.Prim.Double#)
                   (ww4 :: GHC.Types.Double)
                   (ww5 :: Models.Orientation.Orientation) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww ww3) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.D# x ->
                      case ww4 of wild2 { GHC.Types.D# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x y) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case ww2 of wild4 { GHC.Types.D# x1 ->
                           case ww5 of wild5 { GHC.Types.D# y1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## x1 y1) of wild6 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } } } } } }) -}
9b46ba6a5873104b0ce486a8df390fdf
  $w$c== ::
    GHC.Prim.Double#
    -> GHC.Types.Double
    -> Models.Orientation.Orientation
    -> GHC.Prim.Double#
    -> GHC.Types.Double
    -> Models.Orientation.Orientation
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: Models.Orientation.Orientation)
                   (ww3 :: GHC.Prim.Double#)
                   (ww4 :: GHC.Types.Double)
                   (ww5 :: Models.Orientation.Orientation) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww ww3) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.D# x ->
                      case ww4 of wild2 { GHC.Types.D# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.eqDouble ww2 ww5 } } } }) -}
b95feeec9bd37724b6a98a6ead8f1640
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Models.Location.Location
    -> Models.Orientation.Orientation
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U(1*U(U),1*U(U))><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Models.Location.Location)
                   (ww2 :: Models.Orientation.Orientation) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { Models.Location.Location ww4 ww5 ->
                     Models.Location.$w$cshowsPrec 0# ww4 ww5 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { GHC.Types.D# ww4 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Models.State.$fShowCmd2
                       ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Models.State.$fShowState6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Models.State.$fShowState5
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Models.State.$fShowState4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Models.State.$fShowState3
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Models.State.$fShowState2
                                         x))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x)) }) -}
7679c1c28e2bbd556a02a01a5a33023c
  $wgetQuad ::
    GHC.Prim.Double#
    -> GHC.Types.Double
    -> GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Types.Double
    -> GHC.Prim.Int#
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: GHC.Prim.Double#)
                   (ww3 :: GHC.Prim.Double#)
                   (ww4 :: GHC.Types.Double) ->
                 case GHC.Float.$w$catan2
                        (case ww4 of wild1 { GHC.Types.D# x ->
                         case ww1 of wild3 { GHC.Types.D# y ->
                         GHC.Types.D# (GHC.Prim.-## x y) } })
                        (GHC.Prim.-## ww3 ww) of ww5 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<## ww5 0.0##) of wild {
                   GHC.Types.False
                   -> case Models.Orientation.$wangle0To2Pi
                             (GHC.Prim.+## ww5 0.7853981633974483##) of ww6 { DEFAULT ->
                      case Models.Orientation.$wangle0To2Pi
                             (GHC.Prim.+## ww6 (GHC.Prim.negateDouble# ww2)) of ww7 { DEFAULT ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## ww7 4.71238898038469##) of wild1 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## ww7 3.141592653589793##) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.>## ww7 1.5707963267948966##) of wild3 {
                                  GHC.Types.False -> 1# GHC.Types.True -> 2# }
                             GHC.Types.True -> 3# }
                        GHC.Types.True -> 4# } } }
                   GHC.Types.True
                   -> case Models.Orientation.$wangle0To2Pi
                             (GHC.Prim.+##
                                (GHC.Prim.+## 6.283185307179586## ww5)
                                0.7853981633974483##) of ww6 { DEFAULT ->
                      case Models.Orientation.$wangle0To2Pi
                             (GHC.Prim.+## ww6 (GHC.Prim.negateDouble# ww2)) of ww7 { DEFAULT ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## ww7 4.71238898038469##) of wild1 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## ww7 3.141592653589793##) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.>## ww7 1.5707963267948966##) of wild3 {
                                  GHC.Types.False -> 1# GHC.Types.True -> 2# }
                             GHC.Types.True -> 3# }
                        GHC.Types.True -> 4# } } } } }) -}
2c6ee9836a49a4cbbb8590d1066479e6
  $wgetRandomState ::
    System.Random.RandomGen g =>
    g
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> (# g, Models.State.State #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ g
                   (w :: System.Random.RandomGen g)
                   (w1 :: g)
                   (ww :: GHC.Types.Double)
                   (ww1 :: GHC.Types.Double) ->
                 let {
                   ds :: (GHC.Types.Double, g)
                   = System.Random.$fRandomDouble_$crandomR
                       @ g
                       w
                       (Models.State.getRandomState3, ww)
                       w1
                 } in
                 let {
                   ds1 :: (GHC.Types.Double, g)
                   = System.Random.$fRandomDouble_$crandomR
                       @ g
                       w
                       (Models.State.getRandomState3, ww1)
                       (case ds of wild { (,) i g' -> g' })
                 } in
                 let {
                   ds2 :: (Models.Orientation.Orientation, g)
                   = System.Random.$fRandomDouble_$crandomR
                       @ g
                       w
                       Models.State.getRandomState1
                       (case ds1 of wild { (,) j g'' -> g'' })
                 } in
                 (# case ds2 of wild { (,) t g3 -> g3 },
                    Models.State.State
                      (Models.Location.Location
                         (case ds of wild { (,) i g' -> i })
                         (case ds1 of wild { (,) j g'' -> j }))
                      (case ds2 of wild { (,) t g3 -> t }) #)) -}
39b83c9961c82be4b7e0e45264d5267c
  data Cmd
    = Move GHC.Types.Double GHC.Types.Double
    | Turn GHC.Types.Double
    | Stay
03e92fc1250bf60fdd9a80654439b472
  data State
    = State {_loc :: Models.Location.Location,
             _ori :: Models.Orientation.Orientation}
5d270603532e89e6fea1bf3f82b479ec
  _loc :: Models.State.State -> Models.Location.Location
  RecSel Left Models.State.State
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Models.State.State) ->
                 case ds of wild { Models.State.State ds1 ds2 -> ds1 }) -}
ea5deb615eba6d533bc51d718e833afd
  _ori :: Models.State.State -> Models.Orientation.Orientation
  RecSel Left Models.State.State
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Models.State.State) ->
                 case ds of wild { Models.State.State ds1 ds2 -> ds2 }) -}
70c2788e90fbcacfd169994775f8cc7b
  getQuad ::
    Models.State.State -> Models.State.State -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)S(S)),1*U(1*U(1*U(U),1*U(U)),1*U(U))><S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Models.State.State) (w1 :: Models.State.State) ->
                 case w of ww { Models.State.State ww1 ww2 ->
                 case ww1 of ww3 { Models.Location.Location ww4 ww5 ->
                 case ww4 of ww6 { GHC.Types.D# ww7 ->
                 case ww2 of ww8 { GHC.Types.D# ww9 ->
                 case w1 of ww10 { Models.State.State ww11 ww12 ->
                 case ww11 of ww13 { Models.Location.Location ww14 ww15 ->
                 case ww14 of ww16 { GHC.Types.D# ww17 ->
                 case Models.State.$wgetQuad
                        ww7
                        ww5
                        ww9
                        ww17
                        ww15 of ww18 { DEFAULT ->
                 GHC.Types.I# ww18 } } } } } } } }) -}
84b458e4ebf35f25a86d9cbed8753ebb
  getRandomState ::
    System.Random.RandomGen g =>
    g
    -> (GHC.Types.Double, GHC.Types.Double) -> (g, Models.State.State)
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ g
                   (w :: System.Random.RandomGen g)
                   (w1 :: g)
                   (w2 :: (GHC.Types.Double, GHC.Types.Double)) ->
                 case w2 of ww { (,) ww1 ww2 ->
                 case Models.State.$wgetRandomState
                        @ g
                        w
                        w1
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
df0f659b2c8fb2f51c6ee3767ae06fa1
  getRandomState1 ::
    (GHC.Types.Double, Models.Orientation.Orientation)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Models.State.getRandomState3,
                  Models.State.getRandomState2)) -}
af045040d248abc395cc342dfe3d54a5
  getRandomState2 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# 6.283185307179586##) -}
6d1dc76bb49c29f18f99c982dc655f09
  getRandomState3 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0##) -}
496d6fceadc341fa8325c787a2d6bd81
  moveState ::
    Models.State.State -> Models.State.Cmd -> Models.State.State
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U(U(U),U(U)),U(U))><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Models.State.State) (w1 :: Models.State.Cmd) ->
                 case w of ww { Models.State.State ww1 ww2 ->
                 case w1 of wild {
                   Models.State.Move dx dy
                   -> Models.State.State
                        (Models.Location.Location
                           (case ww1 of wild1 { Models.Location.Location ds ds1 ->
                            case ds of wild2 { GHC.Types.D# x ->
                            case dx of wild3 { GHC.Types.D# y ->
                            GHC.Types.D# (GHC.Prim.+## x y) } } })
                           (case ww1 of wild1 { Models.Location.Location ds ds1 ->
                            case ds1 of wild2 { GHC.Types.D# x ->
                            case dy of wild3 { GHC.Types.D# y ->
                            GHC.Types.D# (GHC.Prim.+## x y) } } }))
                        (GHC.Float.$fRealFloatDouble_$catan2 dy dx)
                   Models.State.Turn angle
                   -> Models.State.State ww1 (Models.Orientation.rotate ww2 angle)
                   Models.State.Stay -> Models.State.State ww1 ww2 } }) -}
631ffe6a25455bf8e741a5163314ab68
  stateDistance ::
    Models.State.State -> Models.State.State -> GHC.Types.Double
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)S(S))L),1*U(1*U(1*U(U),1*U(U)),A)><S(S(S(S)S(S))L),1*U(1*U(1*U(U),1*U(U)),A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Models.State.State) (w1 :: Models.State.State) ->
                 case w of ww { Models.State.State ww1 ww2 ->
                 case ww1 of ww3 { Models.Location.Location ww4 ww5 ->
                 case ww4 of ww6 { GHC.Types.D# ww7 ->
                 case ww5 of ww8 { GHC.Types.D# ww9 ->
                 case w1 of ww10 { Models.State.State ww11 ww12 ->
                 case ww11 of ww13 { Models.Location.Location ww14 ww15 ->
                 case ww14 of ww16 { GHC.Types.D# ww17 ->
                 case ww15 of ww18 { GHC.Types.D# ww19 ->
                 let {
                   x3 :: GHC.Prim.Double# = GHC.Prim.-## ww17 ww7
                 } in
                 let {
                   x2 :: GHC.Prim.Double# = GHC.Prim.-## ww19 ww9
                 } in
                 GHC.Types.D#
                   (GHC.Prim.sqrtDouble#
                      (GHC.Prim.+##
                         (GHC.Prim.*## x3 x3)
                         (GHC.Prim.*## x2 x2))) } } } } } } } }) -}
instance GHC.Classes.Eq [Models.State.Cmd] = Models.State.$fEqCmd
instance GHC.Classes.Eq [Models.State.State]
  = Models.State.$fEqState
instance GHC.Show.Show [Models.State.Cmd] = Models.State.$fShowCmd
instance GHC.Show.Show [Models.State.State]
  = Models.State.$fShowState
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

