
==================== FINAL INTERFACE ====================
2017-01-20 22:58:16.343864 UTC

interface rover-domain-0.1.0.0-61Fsc9uUajFGfxZsLCyosq:NN.NeuralNetwork 8001
  interface hash: 89ac311e350a3c98312c7d3b5e01fd77
  ABI hash: 113908154fbb6902a4b5bd1b4a11ec71
  export-list hash: d621a5ae456fb51320f20c47599b47f5
  orphan hash: 58f66fea76b77cc3cd33e9bcf6cc9a72
  flag hash: 34af92ddec629e2403fad3676ddb0e6e
  sig of: Nothing
  used TH splices: False
  where
exports:
  NN.NeuralNetwork.createNetworkW
  NN.NeuralNetwork.NN{NN.NeuralNetwork.create NN.NeuralNetwork.get NN.NeuralNetwork.randomize NN.NeuralNetwork.train}
  NN.NeuralNetwork.NNVars
module dependencies: Matrix.State RandomUtil.Random
                     RandomUtil.RandomMatrix Util.Vars
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ
                      hnn-0.3@hnn-0.3-BTcaYwOzMFRHoXIMlsey6T integer-gmp-1.0.0.1
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      mwc-random-0.13.5.0@mwc-random-0.13.5.0-9fVrEibWMFm8DwR7HO0MWX
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3
                      zlib-0.6.1.2@zlib-0.6.1.2-4CWLN1T27kOJhNvXgy46ZV
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.CG
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Element
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Util
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Vector
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Numeric.Matrix
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Numeric.Vector
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Unboxed
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Devel
                         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Matrix
                         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Modular
                         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Numeric
                         mwc-random-0.13.5.0@mwc-random-0.13.5.0-9fVrEibWMFm8DwR7HO0MWX:System.Random.MWC
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2@zlib-0.6.1.2-4CWLN1T27kOJhNvXgy46ZV:Codec.Compression.Zlib.Stream
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict 48e097497655818e164c2bb81a1d7b2d
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Matrix 515b660ee5ee78b11c9f17f31995b4f9
import  -/  hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Numeric.LinearAlgebra.HMatrix 4e354b7f55efceb1e6739fbf94a43aaa
import  -/  hnn-0.3@hnn-0.3-BTcaYwOzMFRHoXIMlsey6T:AI.HNN.FF.Network 8cb158cb2e5449e87bc4852442ea2657
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader 859b39f57eb3bed457106c30aac21473
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader.Class 8046d4d7c28bbf9d539af876e6134287
import  -/  random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe:System.Random 33fad628288f84aac16d40e5a027af06
import  -/  Matrix.State b77ab63e0ab88f7eb728e5e684a11321
  exports: 2c675e5fd7415c7b3ebccc0daa57f07f
import  -/  RandomUtil.Random 6261e03b28e656e0736ddd6b006154ff
  exports: 7d6c6cf08c7d26459a72686e50048515
  randomMapTwoGens 61d2051ef788269c5955688364b6c5aa
import  -/  RandomUtil.RandomMatrix 83af3a27a70438640466fb94e5da9911
  exports: 3880afec1d3eee666004e2815b9d62b3
  randomizeNRandomMatrixElements 1068b851f9edd9a44a8c25278a089a09
import  -/  Util.Vars e69d4a01e9894a2dea4eb9f135f01c1a
  exports: 5cf7af007601f05532c4b62a35097504
  Vars d9765cd23921f7d00c2542402938917d
  getVar c61cef702e8933c3f98e9b1c7873cf6a
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Reader e4096b104cf1a0df8752e81669ef6a24
import  -/  vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector c1e986e414fb06d8c78b2ec9a85e2dfc
import  -/  vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Storable 8654c53df20dc1a97095be9c331f0e9b
cbb888407db69833dce4ac53b6c18612
  $fNNNetwork ::
    NN.NeuralNetwork.NN (AI.HNN.FF.Network.Network GHC.Types.Double)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (AI.HNN.FF.Network.Network GHC.Types.Double)
                  NN.NeuralNetwork.createNetworkW
                  NN.NeuralNetwork.$fNNNetwork_$cget
                  NN.NeuralNetwork.$fNNNetwork_$ctrain
                  NN.NeuralNetwork.$fNNNetwork_$crandomize -}
ce29910c6accb2b2e5e0968889f27d24
  $fNNNetwork1 ::
    AI.HNN.FF.Network.Network GHC.Types.Double
    -> Data.Vector.Storable.Vector GHC.Types.Double
    -> Data.Vector.Fusion.Util.Id
         (Data.Vector.Storable.Vector GHC.Types.Double)
  {- Arity: 2, Strictness: <S(LSL),1*U(U,U,U)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: AI.HNN.FF.Network.Network GHC.Types.Double)
                   (w1 :: Data.Vector.Storable.Vector GHC.Types.Double) ->
                 case w `cast`
                      (AI.HNN.FF.Network.N:Network[0]
                           <GHC.Types.Double>_P) of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case NN.NeuralNetwork.$w$cget
                        ww1
                        ww2
                        ww3
                        w1 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 (Data.Vector.Storable.Vector @ GHC.Types.Double ww5 ww6 ww7)
                   `cast`
                 (Sym (Data.Vector.Fusion.Util.N:Id[0]
                           <Data.Vector.Storable.Vector GHC.Types.Double>_R)) } }) -}
0ec51ebf9ec2dded3fb2ee4b43cf683c
  $fNNNetwork2 :: [Data.Vector.Storable.Vector GHC.Types.Double]
  {- Unfolding: (GHC.Types.:
                   @ (Data.Vector.Storable.Vector GHC.Types.Double)
                   NN.NeuralNetwork.$fNNNetwork3
                   (GHC.Types.[] @ (Data.Vector.Storable.Vector GHC.Types.Double))) -}
258f045e80c86c2b31349830426aeb93
  $fNNNetwork3 :: Data.Vector.Storable.Vector GHC.Types.Double
  {- Unfolding: (Numeric.Vector.$fNumVector16
                   NN.NeuralNetwork.$fNNNetwork4) -}
29b2274c9b5661757f8fcf2d6ff0619a
  $fNNNetwork4 :: [GHC.Types.Double]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   NN.NeuralNetwork.$fNNNetwork5
                   (GHC.Types.[] @ GHC.Types.Double)) -}
05f2d94ff391b1d9a5785b735587672a
  $fNNNetwork5 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 1.0##) -}
65b1971597f141d56065878e18a2625a
  $fNNNetwork_$cget ::
    AI.HNN.FF.Network.Network GHC.Types.Double
    -> Data.Vector.Storable.Vector GHC.Types.Double
    -> Data.Vector.Storable.Vector GHC.Types.Double
  {- Arity: 2, Strictness: <S(LSL),1*U(U,U,U)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                NN.NeuralNetwork.$fNNNetwork1
                  `cast`
                (<AI.HNN.FF.Network.Network GHC.Types.Double>_R
                 ->_R <Data.Vector.Storable.Vector GHC.Types.Double>_R
                 ->_R Data.Vector.Fusion.Util.N:Id[0]
                          <Data.Vector.Storable.Vector GHC.Types.Double>_R) -}
4f9db68f4295692b877b7eb0fae78851
  $fNNNetwork_$crandomize ::
    System.Random.RandomGen g =>
    g
    -> NN.NeuralNetwork.NNVars
    -> AI.HNN.FF.Network.Network GHC.Types.Double
    -> (AI.HNN.FF.Network.Network GHC.Types.Double, g)
  {- Arity: 4, Strictness: <L,U(U,U,U)><L,U><L,1*U><L,U(U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ g
                   (w :: System.Random.RandomGen g)
                   (w1 :: g)
                   (w2 :: NN.NeuralNetwork.NNVars)
                   (w3 :: AI.HNN.FF.Network.Network GHC.Types.Double) ->
                 case NN.NeuralNetwork.$w$crandomize
                        @ g
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
16c76b418d546e054b14b06bc6beaa32
  $fNNNetwork_$ctrain ::
    NN.NeuralNetwork.NNVars
    -> AI.HNN.FF.Network.Network GHC.Types.Double
    -> AI.HNN.FF.Network.Sample GHC.Types.Double
    -> AI.HNN.FF.Network.Network GHC.Types.Double
  {- Arity: 3, Strictness: <S,U><S,1*U(U,U,U)><S,1*U(U,U(U,U,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: NN.NeuralNetwork.NNVars)
                   (w1 :: AI.HNN.FF.Network.Network GHC.Types.Double)
                   (w2 :: AI.HNN.FF.Network.Sample GHC.Types.Double) ->
                 case w1
                        `cast`
                      (AI.HNN.FF.Network.N:Network[0]
                           <GHC.Types.Double>_P) of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w2 of ww4 { (,) ww5 ww6 ->
                 case NN.NeuralNetwork.$w$ctrain
                        w
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6 of ww7 { (#,,#) ww8 ww9 ww10 ->
                 (Data.Vector.Vector
                    @ (Internal.Matrix.Matrix GHC.Types.Double)
                    ww8
                    ww9
                    ww10)
                   `cast`
                 (Sym (AI.HNN.FF.Network.N:Network[0]
                           <GHC.Types.Double>_P)) } } }) -}
99fa29f2dd508828a332da438e00ded9
  $fNNNetwork_$ssigmoid :: GHC.Types.Double -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (eta :: GHC.Types.Double) ->
                 case eta of x { GHC.Types.D# ipv ->
                 GHC.Float.$fFractionalDouble_$c/
                   (GHC.Types.D# 1.0##)
                   (GHC.Float.$fNumDouble_$c+
                      (GHC.Types.D# 1.0##)
                      (GHC.Float.$fFloatingDouble_$cexp
                         (GHC.Float.$fNumDouble_$cnegate x))) }) -}
d4d4f84fd18759937aff6a4e11e5141e
  $sinit_$slength ::
    Data.Vector.Vector (Data.Vector.Storable.Vector GHC.Types.Double)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: [NEVER] -}
48795fc425fbf7bfc59b69a27f482364
  $slength ::
    Data.Vector.Vector
      (Data.Vector.Storable.Vector GHC.Types.Double,
       Internal.Matrix.Matrix GHC.Types.Double)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: [NEVER] -}
3f26b580aa0630815cc2d665f28d98b3
  $ssigmoid' :: GHC.Types.Double -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (eta :: GHC.Types.Double) ->
                 case eta of x { GHC.Types.D# ipv ->
                 let {
                   s :: GHC.Types.Double
                   = GHC.Float.$fFractionalDouble_$c/
                       (GHC.Types.D# 1.0##)
                       (GHC.Float.$fNumDouble_$c+
                          (GHC.Types.D# 1.0##)
                          (GHC.Float.$fFloatingDouble_$cexp
                             (GHC.Float.$fNumDouble_$cnegate x)))
                 } in
                 GHC.Float.$fNumDouble_$c*
                   s
                   (GHC.Float.$fNumDouble_$c- (GHC.Types.D# 1.0##) s) }) -}
1a6ae8ce96579d2b780bf28292722b89
  $tc'C:NN :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2499064041490965983##
                   11674374645491847928##
                   NN.NeuralNetwork.$trModule
                   NN.NeuralNetwork.$tc'C:NN1) -}
64dd71ffabc6057324f18b470edf5520
  $tc'C:NN1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:NN"#) -}
9af5f28dbb3ccc3ba4e581ac2502c33a
  $tcNN :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6728402783786910944##
                   16428966768677050619##
                   NN.NeuralNetwork.$trModule
                   NN.NeuralNetwork.$tcNN1) -}
5520b65a64f7896d27ecfccda1331a5c
  $tcNN1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NN"#) -}
780af6352fef18554b96e9365bc2ae1f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   NN.NeuralNetwork.$trModule2
                   NN.NeuralNetwork.$trModule1) -}
6e1c737d5a36e0ad597dbd549504bd73
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NN.NeuralNetwork"#) -}
74e87c048b398811f739ea096af47c03
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "rover-domain-0.1.0.0-61Fsc9uUajFGfxZsLCyosq"#) -}
f782d33784d7417c9ed78383ed50a47b
  $w$cget ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Internal.Matrix.Matrix GHC.Types.Double)
    -> Data.Vector.Storable.Vector GHC.Types.Double
    -> (# GHC.Prim.Int#, GHC.Prim.Addr#,
          GHC.ForeignPtr.ForeignPtrContents #)
  {- Arity: 4, Strictness: <L,U><S,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# (Internal.Matrix.Matrix GHC.Types.Double))
                   (w :: Data.Vector.Storable.Vector GHC.Types.Double) ->
                 case Internal.Vector.vjoin
                        @ GHC.Types.Double
                        Foreign.Storable.$fStorableDouble
                        (GHC.Types.:
                           @ (Data.Vector.Storable.Vector GHC.Types.Double)
                           w
                           NN.NeuralNetwork.$fNNNetwork2) of ww3 { Data.Vector.Storable.Vector ww4 ww5 ww6 ->
                 letrec {
                   $wfoldlM'_loop :: GHC.Types.SPEC
                                     -> GHC.Prim.Int#
                                     -> GHC.Prim.Addr#
                                     -> GHC.ForeignPtr.ForeignPtrContents
                                     -> GHC.Prim.Int#
                                     -> (# GHC.Prim.Int#, GHC.Prim.Addr#,
                                           GHC.ForeignPtr.ForeignPtrContents #)
                     {- Arity: 5, Strictness: <S,1*U><L,U><L,U><L,U><S,U>,
                        Inline: [0] -}
                   = \ (w1 :: GHC.Types.SPEC)
                       (ww7 :: GHC.Prim.Int#)
                       (ww8 :: GHC.Prim.Addr#)
                       (ww9 :: GHC.ForeignPtr.ForeignPtrContents)
                       (ww10 :: GHC.Prim.Int#) ->
                     case w1 of ds5 { DEFAULT ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww10 ww1) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ (Internal.Matrix.Matrix GHC.Types.Double)
                                 ww2
                                 (GHC.Prim.+# ww ww10) of ds2 { Unit# ipv ->
                          case Internal.Numeric.$wmXv
                                 @ GHC.Types.Double
                                 Internal.Numeric.$fProductDouble
                                 ipv
                                 (Data.Vector.Storable.Vector
                                    @ GHC.Types.Double
                                    ww7
                                    ww8
                                    ww9) of ww11 { (#,,#) ww12 ww13 ww14 ->
                          case Internal.Numeric.$w$ccmap'5
                                 @ GHC.Types.Double
                                 Internal.Matrix.$fElementDouble
                                 NN.NeuralNetwork.$fNNNetwork_$ssigmoid
                                 ww12
                                 ww13
                                 ww14 of ww15 { Data.Vector.Storable.Vector ww16 ww17 ww18 ->
                          $wfoldlM'_loop
                            GHC.Types.SPEC
                            ww16
                            ww17
                            ww18
                            (GHC.Prim.+# ww10 1#) } } }
                       GHC.Types.True -> (# ww7, ww8, ww9 #) } }
                 } in
                 $wfoldlM'_loop GHC.Types.SPEC ww4 ww5 ww6 0# }) -}
ff56f8c9d56e7d7eaaf29b8d561c9efb
  $w$crandomize ::
    System.Random.RandomGen g =>
    g
    -> NN.NeuralNetwork.NNVars
    -> AI.HNN.FF.Network.Network GHC.Types.Double
    -> (# AI.HNN.FF.Network.Network GHC.Types.Double, g #)
  {- Arity: 4, Strictness: <L,U(U,U,U)><L,U><L,1*U><L,U(U,U,U)>,
     Inline: [0] -}
d64239486df364612d0cad49e2c1d41d
  $w$ctrain ::
    NN.NeuralNetwork.NNVars
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Internal.Matrix.Matrix GHC.Types.Double)
    -> Data.Vector.Storable.Vector GHC.Types.Double
    -> Data.Vector.Storable.Vector GHC.Types.Double
    -> (# GHC.Prim.Int#, GHC.Prim.Int#,
          GHC.Prim.Array# (Internal.Matrix.Matrix GHC.Types.Double) #)
  {- Arity: 6, Strictness: <S,U><L,U><L,U><L,U><L,U><L,U(U,U,U)>,
     Inline: [0] -}
cd4beb33d9dbcfced46e77dacc896bad
  $wgo ::
    System.Random.MWC.Gen
      (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.Any))
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Internal.Matrix.Matrix GHC.Types.Double)
    -> GHC.Prim.State# GHC.Prim.Any
    -> (# GHC.Prim.State# GHC.Prim.Any,
          Data.Vector.Vector (Internal.Matrix.Matrix GHC.Types.Double) #)
  {- Arity: 6, Strictness: <L,U(U,A,U)><S,1*U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
cbb888407db69833dce4ac53b6c18612
  class NN n where
    create :: NN.NeuralNetwork.NNVars -> GHC.Types.IO n
    get :: n
           -> Data.Vector.Storable.Vector GHC.Types.Double
           -> Data.Vector.Storable.Vector GHC.Types.Double
    train :: NN.NeuralNetwork.NNVars
             -> n -> AI.HNN.FF.Network.Sample GHC.Types.Double -> n
    randomize :: System.Random.RandomGen g =>
                 g -> NN.NeuralNetwork.NNVars -> n -> (n, g)
    {-# MINIMAL create, get, train, randomize #-}
553e1549c6d43b178c84aaeffd033c56
  type NNVars = Util.Vars.Vars
b8e751e9e0077f1e719ee037e1971f45
  createNetworkW ::
    NN.NeuralNetwork.NNVars
    -> GHC.Types.IO (AI.HNN.FF.Network.Network GHC.Types.Double)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                NN.NeuralNetwork.createNetworkW1
                  `cast`
                (<NN.NeuralNetwork.NNVars>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <AI.HNN.FF.Network.Network GHC.Types.Double>_R)) -}
b58de08f6850054f817156f8f08e5aed
  createNetworkW1 ::
    Data.Map.Base.Map GHC.Base.String GHC.Types.Double
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          AI.HNN.FF.Network.Network GHC.Types.Double #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (r1 :: Data.Map.Base.Map
                            GHC.Base.String GHC.Types.Double)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   dimensions :: GHC.Types.Int
                   = case Util.Vars.$slookup1
                            @ GHC.Types.Double
                            NN.NeuralNetwork.createNetworkW_name2
                            r1 of wild {
                       GHC.Base.Nothing
                       -> case Data.Maybe.fromJust1 ret_ty GHC.Types.Int of {}
                       GHC.Base.Just x
                       -> case x of ds { GHC.Types.D# ds1 ->
                          case {__pkg_ccall base-4.9.0.0 rintDouble GHC.Prim.Double#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld,
                                                                          GHC.Prim.Double# #)}
                                 ds1
                                 GHC.Prim.realWorld# of wild1 { (#,#) ds2 ds3 ->
                          GHC.Types.I# (GHC.Prim.+# (GHC.Prim.double2Int# ds3) 1#) } } }
                 } in
                 let {
                   lvl39 :: GHC.Types.Int
                   = case Util.Vars.$slookup1
                            @ GHC.Types.Double
                            NN.NeuralNetwork.createNetworkW_name1
                            r1 of wild {
                       GHC.Base.Nothing
                       -> case Data.Maybe.fromJust1 ret_ty GHC.Types.Int of {}
                       GHC.Base.Just x
                       -> case x of ds { GHC.Types.D# ds1 ->
                          case {__pkg_ccall base-4.9.0.0 rintDouble GHC.Prim.Double#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld,
                                                                          GHC.Prim.Double# #)}
                                 ds1
                                 GHC.Prim.realWorld# of wild1 { (#,#) ds2 ds3 ->
                          GHC.Types.I# (GHC.Prim.double2Int# ds3) } } }
                 } in
                 let {
                   dimensions1 :: (GHC.Types.Int, GHC.Types.Int) {- Strictness: m -}
                   = (lvl39, dimensions)
                 } in
                 let {
                   dimensions2 :: GHC.Types.Int
                   = case Util.Vars.$slookup1
                            @ GHC.Types.Double
                            NN.NeuralNetwork.createNetworkW_name
                            r1 of wild {
                       GHC.Base.Nothing
                       -> case Data.Maybe.fromJust1 ret_ty GHC.Types.Int of {}
                       GHC.Base.Just x
                       -> case x of ds { GHC.Types.D# ds1 ->
                          case {__pkg_ccall base-4.9.0.0 rintDouble GHC.Prim.Double#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld,
                                                                          GHC.Prim.Double# #)}
                                 ds1
                                 GHC.Prim.realWorld# of wild1 { (#,#) ds2 ds3 ->
                          GHC.Types.I# (GHC.Prim.double2Int# ds3) } } }
                 } in
                 let {
                   dimensions3 :: (GHC.Types.Int, GHC.Types.Int) {- Strictness: m -}
                   = (dimensions2, lvl39)
                 } in
                 let {
                   dimensions4 :: [(GHC.Types.Int, GHC.Types.Int)]
                   = GHC.Types.:
                       @ (GHC.Types.Int, GHC.Types.Int)
                       dimensions3
                       (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))
                 } in
                 let {
                   dimensions5 :: [(GHC.Types.Int, GHC.Types.Int)]
                   = GHC.Types.:
                       @ (GHC.Types.Int, GHC.Types.Int)
                       dimensions1
                       dimensions4
                 } in
                 case System.Random.MWC.withSystemRandom1
                        @ (GHC.ST.ST GHC.Prim.Any)
                        @ (Data.Vector.Vector (Internal.Matrix.Matrix GHC.Types.Double))
                        (Control.Monad.Primitive.$fPrimBaseST @ GHC.Prim.Any)
                        (\ (gen :: System.Random.MWC.GenST GHC.Prim.Any)
                           (eta1 :: GHC.Prim.State# GHC.Prim.Any)[OneShot] ->
                         case GHC.Magic.runRW#
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.Vector.Vector (Internal.Matrix.Matrix GHC.Types.Double))
                                NN.NeuralNetwork.createNetworkW2 of ds1 { (#,#) ipv1 ipv2 ->
                         case ipv2 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                         NN.NeuralNetwork.$wgo gen dimensions5 ww1 ww2 ww3 eta1 } })
                          `cast`
                        (<System.Random.MWC.GenST GHC.Prim.Any>_R
                         ->_R Sym (GHC.ST.N:ST[0]
                                       <GHC.Prim.Any>_N
                                       <Data.Vector.Vector
                                          (Internal.Matrix.Matrix GHC.Types.Double)>_R))
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    ipv1
                      `cast`
                    (Sym (AI.HNN.FF.Network.N:Network[0]
                              <GHC.Types.Double>_P)) #) }) -}
6277f4ca9f1b31794eeb268a730b537e
  createNetworkW2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector (Internal.Matrix.Matrix GHC.Types.Double) #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newArray#
                        @ (Internal.Matrix.Matrix GHC.Types.Double)
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        0#
                        (Data.Vector.Mutable.uninitialised
                           @ (Internal.Matrix.Matrix GHC.Types.Double))
                        s1
                          `cast`
                        (GHC.Prim.State#
                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.unsafeFreezeArray#
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        @ (Internal.Matrix.Matrix GHC.Types.Double)
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2
                      `cast`
                    (GHC.Prim.State#
                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                            <GHC.Prim.RealWorld>_N))_R,
                    Data.Vector.Vector
                      @ (Internal.Matrix.Matrix GHC.Types.Double)
                      0#
                      0#
                      ipv3 #) } }) -}
f1cd175172b99add4082bf27e11e1760
  createNetworkW_name :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "numberOutputs"#) -}
3c406e4762a1ea594ba5e26a5ebf2e11
  createNetworkW_name1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "numberHidden"#) -}
36acf4b1ec6c8da5640025ba47bde089
  createNetworkW_name2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "numberInputs"#) -}
instance NN.NeuralNetwork.NN [AI.HNN.FF.Network.Network]
  = NN.NeuralNetwork.$fNNNetwork
"SPEC/NN.NeuralNetwork length @ Vector @ (Vector Double)" [ALWAYS] forall ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                         Data.Vector.Vector
                                                                                         (Data.Vector.Storable.Vector
                                                                                            GHC.Types.Double))
  Data.Vector.Generic.length @ Data.Vector.Vector
                             @ (Data.Vector.Storable.Vector GHC.Types.Double)
                             $dVector
  = NN.NeuralNetwork.$sinit_$slength
"SPEC/NN.NeuralNetwork length @ Vector @ (Vector Double,
                                         Matrix Double)" [ALWAYS] forall ($dVector :: Data.Vector.Generic.Base.Vector
                                                                                                                                                 Data.Vector.Vector
                                                                                                                                                 (Data.Vector.Storable.Vector
                                                                                                                                                    GHC.Types.Double,
                                                                                                                                                  Internal.Matrix.Matrix
                                                                                                                                                    GHC.Types.Double))
  Data.Vector.Generic.length @ Data.Vector.Vector
                             @ (Data.Vector.Storable.Vector GHC.Types.Double,
                                Internal.Matrix.Matrix GHC.Types.Double)
                             $dVector
  = NN.NeuralNetwork.$slength
"SPEC/NN.NeuralNetwork sigmoid @ Double" [ALWAYS] forall ($dFloating :: GHC.Float.Floating
                                                                          GHC.Types.Double)
  AI.HNN.FF.Network.sigmoid @ GHC.Types.Double $dFloating
  = NN.NeuralNetwork.$fNNNetwork_$ssigmoid
"SPEC/NN.NeuralNetwork sigmoid' @ Double" [ALWAYS] forall ($dFloating :: GHC.Float.Floating
                                                                           GHC.Types.Double)
  AI.HNN.FF.Network.sigmoid' @ GHC.Types.Double $dFloating
  = NN.NeuralNetwork.$ssigmoid'
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

