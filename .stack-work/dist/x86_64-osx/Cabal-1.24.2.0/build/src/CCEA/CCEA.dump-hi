
==================== FINAL INTERFACE ====================
2017-01-20 22:58:16.785816 UTC

interface rover-domain-0.1.0.0-61Fsc9uUajFGfxZsLCyosq:CCEA.CCEA 8001
  interface hash: f299f3aa8c74dc4b6fe5f2d6ce762740
  ABI hash: 0abd3083a76b02ea9790e478967a1310
  export-list hash: fd21067d0f39b21e72638931f3467a6c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: db84b2549858666a400c84cb900ff8fa
  sig of: Nothing
  used TH splices: False
  where
exports:
  CCEA.CCEA.createCCEA
  CCEA.CCEA.runEpoch
  CCEA.CCEA.runGeneration
  CCEA.CCEA.CCEA{CCEA.CCEA.CCEA}
  CCEA.CCEA.CCEAVars
module dependencies: Matrix.State NN.NeuralNetwork
                     RandomUtil.Random RandomUtil.RandomMatrix Util.Vars
package dependencies: MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ
                      hnn-0.3@hnn-0.3-BTcaYwOzMFRHoXIMlsey6T integer-gmp-1.0.0.1
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      mwc-random-0.13.5.0@mwc-random-0.13.5.0-9fVrEibWMFm8DwR7HO0MWX
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      random-shuffle-0.0.4@random-shuffle-0.0.4-LfeDYNPfwrQ2o9p6tw2M9l
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3
                      zlib-0.6.1.2@zlib-0.6.1.2-4CWLN1T27kOJhNvXgy46ZV
orphans: MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov:Control.Monad.Random
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.CG
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Element
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Util
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Vector
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Numeric.Matrix
         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Numeric.Vector
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Unboxed
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Devel
                         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Matrix
                         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Modular
                         hmatrix-0.17.0.2@hmatrix-0.17.0.2-IdOSLSyc4bNBeSHtVcVJxZ:Internal.Numeric
                         mwc-random-0.13.5.0@mwc-random-0.13.5.0-9fVrEibWMFm8DwR7HO0MWX:System.Random.MWC
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2@zlib-0.6.1.2-4CWLN1T27kOJhNvXgy46ZV:Codec.Compression.Zlib.Stream
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Traversable 7ce5b7ee67475ac3d03ae825b86efd9f
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict 48e097497655818e164c2bb81a1d7b2d
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader 859b39f57eb3bed457106c30aac21473
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader.Class 8046d4d7c28bbf9d539af876e6134287
import  -/  random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe:System.Random 33fad628288f84aac16d40e5a027af06
import  -/  random-shuffle-0.0.4@random-shuffle-0.0.4-LfeDYNPfwrQ2o9p6tw2M9l:System.Random.Shuffle 3f5e54b2036bc5b8dc7743ffe99c3f89
import  -/  NN.NeuralNetwork 113908154fbb6902a4b5bd1b4a11ec71
  exports: d621a5ae456fb51320f20c47599b47f5
  NN cbb888407db69833dce4ac53b6c18612
  NNVars 553e1549c6d43b178c84aaeffd033c56
  create cdc32f3b564c44acfd8af2d76be0abf3
  randomize 8a7dd191fabcbc4efa1e9403fc056b1d
import  -/  Util.Vars e69d4a01e9894a2dea4eb9f135f01c1a
  exports: 5cf7af007601f05532c4b62a35097504
  Vars d9765cd23921f7d00c2542402938917d
  getVar c61cef702e8933c3f98e9b1c7873cf6a
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Reader e4096b104cf1a0df8752e81669ef6a24
import  -/  vector-0.11.0.0@vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3:Data.Vector c1e986e414fb06d8c78b2ec9a85e2dfc
2631b8a0f4c81c52ddf539f351d86136
  $tc'CCEA :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13643024285896993301##
                   9285017216075498876##
                   CCEA.CCEA.$trModule
                   CCEA.CCEA.$tc'CCEA1) -}
820050a72ea4ceec1aade7e7756e3409
  $tc'CCEA1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CCEA"#) -}
7c740d2771424d84943af9b7256304c9
  $tcCCEA :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6805980656555013041##
                   12408754248504037593##
                   CCEA.CCEA.$trModule
                   CCEA.CCEA.$tcCCEA1) -}
4bfd9412650def303eadbba734116e9d
  $tcCCEA1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CCEA"#) -}
fec9da1838c13b3c9a4476f109d0fec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   CCEA.CCEA.$trModule2
                   CCEA.CCEA.$trModule1) -}
ddbd0b44c01066e22fee4e4e03ea7ee6
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CCEA.CCEA"#) -}
97194b617340b80e0c1cf88656646a4a
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "rover-domain-0.1.0.0-61Fsc9uUajFGfxZsLCyosq"#) -}
0284de722c95fef8efbde072664baedd
  $wevaluateTeams ::
    [[n]]
    -> s -> CCEA.CCEA.CCEAEvaluator n s -> (# s, CCEA.CCEA.Scores #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,C(C1(U(U,U)))>, Inline: [0] -}
42ac6baa14e05c45390383db243b7813
  $wrunEpoch ::
    System.Random.RandomGen g =>
    CCEA.CCEA.CCEAVars
    -> g -> CCEA.CCEA.CCEA n s -> (# CCEA.CCEA.CCEA n s, g #)
  {- Arity: 4,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><S,U><L,U><L,U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ @ n
                   @ g
                   @ s
                   (w :: System.Random.RandomGen g)
                   (w1 :: CCEA.CCEA.CCEAVars)
                   (w2 :: g)
                   (w3 :: CCEA.CCEA.CCEA n s) ->
                 case Util.Vars.$slookup1
                        @ GHC.Types.Double
                        CCEA.CCEA.runEpoch_name
                        w1 of wild {
                   GHC.Base.Nothing
                   -> case Data.Maybe.fromJust1
                      ret_ty (# CCEA.CCEA.CCEA n s, g #)
                      of {}
                   GHC.Base.Just x
                   -> case x of ds1 { GHC.Types.D# ds2 ->
                      case {__pkg_ccall base-4.9.0.0 rintDouble GHC.Prim.Double#
                                                                -> GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      GHC.Prim.Double# #)}
                             ds2
                             GHC.Prim.realWorld# of wild1 { (#,#) ds3 ds4 ->
                      case GHC.Integer.Type.decodeDoubleInteger
                             ds4 of ds { (#,#) ipv ipv1 ->
                      letrec {
                        $wrunGenerations :: GHC.Integer.Type.Integer
                                            -> CCEA.CCEA.CCEAVars
                                            -> g
                                            -> CCEA.CCEA.CCEA n s
                                            -> (# CCEA.CCEA.CCEA n s, g #)
                          {- Arity: 4, Strictness: <S,U><L,U><L,U><L,U(U,U,U)>,
                             Inline: [0] -}
                        = \ (w4 :: GHC.Integer.Type.Integer)
                            (w5 :: CCEA.CCEA.CCEAVars)
                            (w6 :: g)
                            (w7 :: CCEA.CCEA.CCEA n s) ->
                          case GHC.Integer.Type.eqInteger#
                                 w4
                                 CCEA.CCEA.runEpoch4 of wild2 { DEFAULT ->
                          case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                            GHC.Types.False
                            -> case w7 of wild4 { CCEA.CCEA.CCEA pop e s1 ->
                               let {
                                 ds7 :: (CCEA.CCEA.CCEA n s, g)
                                 = case CCEA.CCEA.$wrunGeneration
                                          @ n
                                          @ g
                                          @ s
                                          w
                                          w5
                                          w6
                                          wild4 of ww { (#,#) ww1 ww2 ->
                                   (ww1, ww2) }
                               } in
                               $wrunGenerations
                                 (GHC.Integer.Type.minusInteger w4 CCEA.CCEA.runEpoch1)
                                 w5
                                 (case ds7 of wild5 { (,) newCCEA newG -> newG })
                                 (case ds7 of wild5 { (,) newCCEA newG -> newCCEA }) }
                            GHC.Types.True -> (# w7, w2 #) } }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# ipv1 0#) of wild2 {
                        GHC.Types.False
                        -> $wrunGenerations
                             (GHC.Integer.Type.shiftLInteger ipv ipv1)
                             w1
                             w2
                             w3
                        GHC.Types.True
                        -> case GHC.Integer.Type.integerToInt ipv of n1 { DEFAULT ->
                           $wrunGenerations
                             (GHC.Integer.Type.smallInteger
                                (GHC.Prim.uncheckedIShiftRA# n1 (GHC.Prim.negateInt# ipv1)))
                             w1
                             w2
                             w3 } } } } } }) -}
7fc8ecd310048ea5a2734b55f152c976
  $wrunGeneration ::
    System.Random.RandomGen g =>
    CCEA.CCEA.CCEAVars
    -> g -> CCEA.CCEA.CCEA n s -> (# CCEA.CCEA.CCEA n s, g #)
  {- Arity: 4,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><L,1*U><L,U><L,1*U(1*U,U,U)>,
     Inline: [0],
     Unfolding: (\ @ n
                   @ g
                   @ s
                   (w :: System.Random.RandomGen g)
                   (w1 :: CCEA.CCEA.CCEAVars)
                   (w2 :: g)
                   (w3 :: CCEA.CCEA.CCEA n s) ->
                 let {
                   ds :: (CCEA.CCEA.CCEA n s, g)
                   = case w3 of wild { CCEA.CCEA.CCEA pop eval state ->
                     (let {
                        shuffledPopulation :: [[n]]
                        = GHC.Base.map
                            @ [n]
                            @ [n]
                            (\ (xs :: [n]) ->
                             case GHC.List.$wlenAcc @ n xs 0# of ww2 { DEFAULT ->
                             case System.Random.Shuffle.shuffle'1
                                    @ g
                                    (System.Random.Shuffle.$wrseq'
                                       @ g
                                       w
                                       (GHC.Prim.-# ww2 1#)
                                       w2) of ww { (#,#) ww1 ww4 ->
                             System.Random.Shuffle.shuffle1
                               @ n
                               (System.Random.Shuffle.shuffle_x
                                  @ n
                                  (GHC.Base.map
                                     @ n
                                     @ (System.Random.Shuffle.Tree n)
                                     (System.Random.Shuffle.$WLeaf @ n)
                                     xs))
                               ww1 } })
                            pop
                      } in
                      let {
                        ds1 :: (s, CCEA.CCEA.Scores)
                        = case CCEA.CCEA.$wevaluateTeams
                                 @ n
                                 @ s
                                 (Data.OldList.transpose @ n shuffledPopulation)
                                 state
                                 eval of ww { (#,#) ww1 ww2 ->
                          (ww1, ww2) }
                      } in
                      CCEA.CCEA.CCEA
                        @ n
                        @ s
                        (CCEA.CCEA.jointMap
                           @ [n]
                           @ [GHC.Types.Double]
                           @ [n]
                           (CCEA.CCEA.runEpoch2 @ n)
                           shuffledPopulation
                           (case ds1 of wild1 { (,) finalState scores ->
                            Data.OldList.transpose @ GHC.Types.Double scores }))
                        eval
                        (case ds1 of wild1 { (,) finalState scores -> finalState }),
                      w2) }
                 } in
                 (# case ds of wild { (,) mostlyTheBest g' -> mostlyTheBest },
                    case ds of wild { (,) mostlyTheBest g' -> g' } #)) -}
82bfc62c56a02538b98d7a9274a414f0
  data CCEA n s
    = CCEA (CCEA.CCEA.Population n) (CCEA.CCEA.CCEAEvaluator n s) s
4c81e1e22e7dce8f2c0004ac7a85aaa6
  type CCEAEvaluator n s = s -> [n] -> (s, [GHC.Types.Double])
f1fe14430b46ec26277206d290d50430
  type CCEAVars = Util.Vars.Vars
89b61ade7db09f3c6533c5ee6d1a9c23
  type Population n = [[n]]
62792831e0560ed696172aaebc85778b
  type Scores = [[GHC.Types.Double]]
a43fa64c787a02367c741f33c1d73ff2
  createCCEA ::
    NN.NeuralNetwork.NN n =>
    NN.NeuralNetwork.NNVars
    -> CCEA.CCEA.CCEAVars
    -> s
    -> CCEA.CCEA.CCEAEvaluator n s
    -> GHC.Types.IO (CCEA.CCEA.CCEA n s)
  {- Arity: 6,
     Strictness: <L,U(C(U),A,A,A)><L,U><S,U><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                CCEA.CCEA.createCCEA1
                  `cast`
                (forall (n :: <*>_N) (s :: <*>_N).
                 <NN.NeuralNetwork.NN n>_R
                 ->_R <NN.NeuralNetwork.NNVars>_R
                 ->_R <CCEA.CCEA.CCEAVars>_R
                 ->_R <s>_R
                 ->_R <CCEA.CCEA.CCEAEvaluator n s>_R
                 ->_R Sym (GHC.Types.N:IO[0] <CCEA.CCEA.CCEA n s>_R)) -}
d188e4ddb5e18e4ed962e6fa128f2bc0
  createCCEA1 ::
    NN.NeuralNetwork.NN n =>
    NN.NeuralNetwork.NNVars
    -> CCEA.CCEA.CCEAVars
    -> s
    -> CCEA.CCEA.CCEAEvaluator n s
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, CCEA.CCEA.CCEA n s #)
  {- Arity: 6,
     Strictness: <L,U(C(U),A,A,A)><L,U><S,U><L,U><L,U><L,U>,
     Unfolding: (\ @ n
                   @ s
                   ($dNN :: NN.NeuralNetwork.NN n)
                   (netVars :: NN.NeuralNetwork.NNVars)
                   (cceaVars :: CCEA.CCEA.CCEAVars)
                   (state :: s)
                   (eval :: CCEA.CCEA.CCEAEvaluator n s)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Util.Vars.$slookup1
                        @ GHC.Types.Double
                        CCEA.CCEA.createCCEA_name1
                        cceaVars of wild {
                   GHC.Base.Nothing
                   -> case Data.Maybe.fromJust1
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, CCEA.CCEA.CCEA n s #)
                      of {}
                   GHC.Base.Just x
                   -> case x of ds { GHC.Types.D# ds1 ->
                      case {__pkg_ccall base-4.9.0.0 rintDouble GHC.Prim.Double#
                                                                -> GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      GHC.Prim.Double# #)}
                             ds1
                             GHC.Prim.realWorld# of wild1 { (#,#) ds2 ds3 ->
                      let {
                        y :: GHC.Prim.Int# = GHC.Prim.double2Int# ds3
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.># 1# y) of wild2 {
                        GHC.Types.False
                        -> let {
                             lvl5 :: [GHC.Types.IO n]
                             = case Util.Vars.$slookup1
                                      @ GHC.Types.Double
                                      CCEA.CCEA.createCCEA_name
                                      cceaVars of wild3 {
                                 GHC.Base.Nothing
                                 -> case Data.Maybe.fromJust1 ret_ty [GHC.Types.IO n] of {}
                                 GHC.Base.Just x1
                                 -> case x1 of ds4 { GHC.Types.D# ds5 ->
                                    case {__pkg_ccall base-4.9.0.0 rintDouble GHC.Prim.Double#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    GHC.Prim.Double# #)}
                                           ds5
                                           GHC.Prim.realWorld# of wild4 { (#,#) ds6 ds7 ->
                                    let {
                                      y1 :: GHC.Prim.Int# = GHC.Prim.double2Int# ds7
                                    } in
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.># 1# y1) of wild5 {
                                      GHC.Types.False
                                      -> let {
                                           lvl6 :: GHC.Types.IO n
                                           = NN.NeuralNetwork.create @ n $dNN netVars
                                         } in
                                         letrec {
                                           go1 :: GHC.Prim.Int# -> [GHC.Types.IO n]
                                             {- Arity: 1, Strictness: <L,U> -}
                                           = \ (x2 :: GHC.Prim.Int#) ->
                                             GHC.Types.:
                                               @ (GHC.Types.IO n)
                                               lvl6
                                               (case GHC.Prim.tagToEnum#
                                                       @ GHC.Types.Bool
                                                       (GHC.Prim.==# x2 y1) of wild6 {
                                                  GHC.Types.False -> go1 (GHC.Prim.+# x2 1#)
                                                  GHC.Types.True
                                                  -> GHC.Types.[] @ (GHC.Types.IO n) })
                                         } in
                                         go1 1#
                                      GHC.Types.True -> GHC.Types.[] @ (GHC.Types.IO n) } } } }
                           } in
                           let {
                             lvl6 :: GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [n] #)
                               {- Arity: 1 -}
                             = CCEA.CCEA.createCCEA3 @ n lvl5
                           } in
                           letrec {
                             go1 :: GHC.Prim.Int# -> [GHC.Types.IO [n]]
                               {- Arity: 1, Strictness: <L,U> -}
                             = \ (x1 :: GHC.Prim.Int#) ->
                               GHC.Types.:
                                 @ (GHC.Types.IO [n])
                                 lvl6 `cast` (Sym (GHC.Types.N:IO[0] <[n]>_R))
                                 (case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.==# x1 y) of wild3 {
                                    GHC.Types.False -> go1 (GHC.Prim.+# x1 1#)
                                    GHC.Types.True -> GHC.Types.[] @ (GHC.Types.IO [n]) })
                           } in
                           case CCEA.CCEA.createCCEA2
                                  @ n
                                  (go1 1#)
                                  eta of ds4 { (#,#) ipv ipv1 ->
                           (# ipv, CCEA.CCEA.CCEA @ n @ s ipv1 eval state #) }
                        GHC.Types.True
                        -> case CCEA.CCEA.createCCEA2
                                  @ n
                                  (GHC.Types.[] @ (GHC.Types.IO [n]))
                                  eta of ds4 { (#,#) ipv ipv1 ->
                           (# ipv, CCEA.CCEA.CCEA @ n @ s ipv1 eval state #) } } } } }) -}
e229f67ad928c1514bd574dddc1911c0
  createCCEA2 ::
    [GHC.Types.IO [n]]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [[n]] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U> -}
7fa5c577af1831f198e642cb80d7b1a1
  createCCEA3 ::
    [GHC.Types.IO n]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [n] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U> -}
d46e2cf6f5ff6b0df3d3feaa75783051
  createCCEA_name :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "poolSize"#) -}
a7718049a56dc38f15063506e62f475e
  createCCEA_name1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "numberPools"#) -}
e57c239c79b6a7e5841f495fb61e6755
  jointMap :: (a -> b -> c) -> [a] -> [b] -> [c]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><S,1*U><L,1*U> -}
599691f9ab97682a679cd5f0d52e43f3
  runEpoch ::
    (NN.NeuralNetwork.NN n, System.Random.RandomGen g) =>
    CCEA.CCEA.CCEAVars
    -> NN.NeuralNetwork.NNVars
    -> g
    -> CCEA.CCEA.CCEA n s
    -> (CCEA.CCEA.CCEA n s, g)
  {- Arity: 6,
     Strictness: <L,A><L,U(C(U(1*U(U),U)),C(U(U,U)),A)><S,U><L,A><L,U><L,U(U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ n
                   @ g
                   @ s
                   (w :: NN.NeuralNetwork.NN n)
                   (w1 :: System.Random.RandomGen g)
                   (w2 :: CCEA.CCEA.CCEAVars)
                   (w3 :: NN.NeuralNetwork.NNVars)
                   (w4 :: g)
                   (w5 :: CCEA.CCEA.CCEA n s) ->
                 case CCEA.CCEA.$wrunEpoch
                        @ n
                        @ g
                        @ s
                        w1
                        w2
                        w4
                        w5 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
28db6997eea3296bf22bfc01b9e33534
  runEpoch1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
0ab594185c3eb195635ef69245d62ecd
  runEpoch2 :: [n] -> [GHC.Types.Double] -> [n]
  {- Arity: 2, Strictness: <L,U><L,U>x -}
d58251e32592851aada9d55f7f7ed315
  runEpoch3 :: [n]
  {- Strictness: b -}
dc1a5ad5e0bb4c178712064b0e0c313d
  runEpoch4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
a342996802e4713350337d80bf019cd0
  runEpoch_name :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "numberGenerationsPerEpoch"#) -}
97a14a2d8a474953107bfa5bd3ebc553
  runGeneration ::
    (NN.NeuralNetwork.NN n, System.Random.RandomGen g) =>
    CCEA.CCEA.CCEAVars
    -> NN.NeuralNetwork.NNVars
    -> g
    -> CCEA.CCEA.CCEA n s
    -> (CCEA.CCEA.CCEA n s, g)
  {- Arity: 6,
     Strictness: <L,A><L,U(C(U(1*U(U),U)),C(U(U,U)),A)><L,1*U><L,A><L,U><L,1*U(1*U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ n
                   @ g
                   @ s
                   (w :: NN.NeuralNetwork.NN n)
                   (w1 :: System.Random.RandomGen g)
                   (w2 :: CCEA.CCEA.CCEAVars)
                   (w3 :: NN.NeuralNetwork.NNVars)
                   (w4 :: g)
                   (w5 :: CCEA.CCEA.CCEA n s) ->
                 case CCEA.CCEA.$wrunGeneration
                        @ n
                        @ g
                        @ s
                        w1
                        w2
                        w4
                        w5 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

