
==================== FINAL INTERFACE ====================
2017-01-20 22:58:13.713526 UTC

interface rover-domain-0.1.0.0-61Fsc9uUajFGfxZsLCyosq:Util.Vars 8001
  interface hash: d6c46f7382db28b16e06538a8e2cb4a5
  ABI hash: e69d4a01e9894a2dea4eb9f135f01c1a
  export-list hash: 5cf7af007601f05532c4b62a35097504
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 51bdbb7da50d74bac600f8086fd85c9a
  sig of: Nothing
  used TH splices: False
  where
exports:
  Util.Vars.getVar
  Util.Vars.Vars
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 8d095ad71634b5551ba5dc1307b7f9e5
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict 48e097497655818e164c2bb81a1d7b2d
f18faf8f02beffc2a5f5b3c9709d94ca
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
8680da182a7330262d362784ead80129
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Util.Vars.$trModule2
                   Util.Vars.$trModule1) -}
b0d49f2f8d981a4d324b587bacc843bb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Util.Vars"#) -}
d28354f69437fa9c4fa73d4d19988fe0
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "rover-domain-0.1.0.0-61Fsc9uUajFGfxZsLCyosq"#) -}
d9765cd23921f7d00c2542402938917d
  type Vars = Data.Map.Base.Map GHC.Base.String GHC.Types.Double
c61cef702e8933c3f98e9b1c7873cf6a
  getVar :: GHC.Base.String -> Util.Vars.Vars -> GHC.Types.Double
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (name :: GHC.Base.String) (bindings :: Util.Vars.Vars) ->
                 case Util.Vars.$slookup1 @ GHC.Types.Double name bindings of wild {
                   GHC.Base.Nothing -> Data.Maybe.fromJust1 @ GHC.Types.Double
                   GHC.Base.Just x -> x }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

