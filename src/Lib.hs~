module Lib
    ( someFunc
    ) where

import AI.HNN.FF.Network
import Numeric.LinearAlgebra.HMatrix hiding (corr)

import qualified Data.Vector as V

import Matrix.State

samples :: Samples Double
samples = [ (fromList [0,0], fromList [0])
          , (fromList [0,1], fromList [1])
          , (fromList [1,0], fromList [1])
          , (fromList [1,1], fromList [0])
          ]

network :: IO (Network Double)
network = createNetwork 2 [4] 2

getM :: Network Double -> V.Vector (Matrix Double)
getM (Network matrices) = matrices


randomizeMatrix :: Matrix Double -> IO (Matrix Double)
randomizeMatrix mat = undefined


someFunc :: IO ()
someFunc = do
  n <- network
  mapM_ (print . output n tanh . fst) samples
  putStrLn "------------------------"
  let n' = trainNTimes 1000 0.8 tanh tanh' n samples
  mapM_ (print . output n' tanh . fst) samples
  putStrLn "------------------------"
  let matrixVector = getM n
  putStrLn $ concatMap (\x -> show x ++ "\n") matrixVector
